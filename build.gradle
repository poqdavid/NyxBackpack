buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "oss-sonatype-public"
            url = "https://oss.sonatype.org/content/repositories/public/"
        }
        maven {
            name = "Sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            name = "Gradle-Plugins"
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true

        //classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '2.0.2'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '6.+' //Gradle 6

        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "org.spongepowered:SpongeGradle:0.11.5"
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
        classpath "net.kyori:blossom:1.+"
    }
}

plugins {
    id "groovy"
    id "java"
    id "idea"
    id "signing"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecrell.licenser'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.spongepowered.gradle.plugin'
apply plugin: 'net.kyori.blossom'

group = "${getProjectProperty('m_group')}" as Object
version = "${getProjectProperty('minecraft_version')}-${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}-${getProjectProperty('m_api')}-${getProjectProperty('m_suffix')}" as Object
description = "${getProjectProperty('m_description')}"

blossom {
    replaceToken("@version@", "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}")
    replaceToken("@description@", description)
    replaceToken("@id@", m_id)
    replaceToken("@name@", m_name)
    replaceToken("@organization@", m_organization)
    replaceToken("@authors@", m_authors)
    replaceToken("@url@", m_url)
}

if (System.getenv().BUILD_NUMBER != null) {
    version += "+${System.getenv().BUILD_NUMBER}"
}

minecraft {
    mappings channel: getProjectProperty('mappings_channel'), version: getProjectProperty('mappings_version')
}

mixin {
    defaultObfuscationEnv "notch"
}

sourceSets {
    main {
        ext.refMap = "mixins.${project.name.toLowerCase()}.refmap.json"
    }
}

mixin {
    add sourceSets.main, "mixins.${project.name.toLowerCase()}.refmap.json"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "Forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "Nucleus"
        url = "https://repo.drnaylor.co.uk/artifactory/list/minecraft"
    }
    maven {
        name = "QuickStart"
        url = "https://repo.drnaylor.co.uk/artifactory/list/quickstart"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public"
    }
}

configurations {
    provided
    compile.extendsFrom provided
    compileJava.options.encoding = "UTF-8"
    jar.archiveName = "${project.name}-${project.version}.jar"
}

dependencies {
    implementation group: 'org.bstats', name: 'bstats-sponge', version: getProjectProperty('bstats')
    shadow group: 'org.bstats', name: 'bstats-sponge', version: getProjectProperty('bstats')

    minecraft "net.minecraftforge:forge:${getProjectProperty('forgeVersion')}"

    implementation("org.spongepowered:spongeapi:${getProjectProperty('spongeapi')}")
    annotationProcessor("org.spongepowered:spongeapi:${getProjectProperty('spongeapi')}")

    implementation "org.spongepowered:mixin:${getProjectProperty('spongemixin')}"
    compile "org.spongepowered:mixin:${getProjectProperty('spongemixin')}:processor"

    annotationProcessor("org.spongepowered:mixin:${getProjectProperty('spongemixin')}:processor")

    implementation("javax.validation:validation-api:2.0.1.Final")
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    implementation 'io.github.poqdavid.nyx:NyxCore'
}

license {
    header = file('HEADER.txt')
    newLine = true
    ext {
        name = getProjectProperty('m_name')
        organization = getProjectProperty('m_organization')
        url = getProjectProperty('m_url')
    }
    include '**/*.java'
    include '**/*.groovy'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
    //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.compilerArgs += [
            '-Xlint:-processing',
            '-Xlint:-deprecation',
    ]
    options.deprecation = true
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}"
    inputs.property "mcversion", getProjectProperty('minecraft_version')
    inputs.property "modid", getProjectProperty('m_id')
    inputs.property "description", getProjectProperty('m_description')
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand 'version': "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}", 'mcversion': getProjectProperty('minecraft_version')
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    from 'LICENSE.txt'
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier('')
    exclude 'dummyThing'
    relocate "org.bstats", "${getProjectProperty('m_group')}.${getProjectProperty('m_id')}.shaded.bstats"
    archiveName("${project.name}-${project.version}.jar")
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

artifacts {
    archives shadowJar
}

signing {
    required { hasProperty("signing.keyId") }
    sign configurations.archives, configurations.shadow
}

task copyJar(type: Copy) {
    from jar.archiveFile
    into 'C:/Minecraft/Servers/Sponge/mods'
    project.logger.log(LogLevel.WARN, "Copied file: ${jar.archiveFile}")
}

String getProjectProperty(String propertyName) {
    String temp = "null"
    if (hasProperty(propertyName)) {
        temp = this.properties.get(propertyName)
        project.logger.log(LogLevel.WARN, "Found property: ${propertyName} value: ${temp}")
    } else {
        project.logger.log(LogLevel.ERROR, "Property (${propertyName}) not found!")
    }
    return temp
}

tasks.jar.finalizedBy('reobfJar')
tasks.build.finalizedBy('copyJar')